// Mocks generated by Mockito 5.3.2 from annotations
// in food_order_ui/test/features/products/domain/usecases/get_product_by_id_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:food_order_ui/core/error/failure.dart' as _i5;
import 'package:food_order_ui/core/shared/entities/product.dart' as _i6;
import 'package:food_order_ui/features/products/data/models/category_model.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

import 'get_product_by_id_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FakeProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFakeProductRepository extends _i1.Mock
    implements _i3.FakeProductRepository {
  MockFakeProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>> getAllProducts() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllProducts,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Product>>(
          this,
          Invocation.method(
            #getAllProducts,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>> getProductsByCategory(
          _i7.CategoryModel? cat) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductsByCategory,
          [cat],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Product>>(
          this,
          Invocation.method(
            #getProductsByCategory,
            [cat],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>>
      getAllFavoriteProductsFromDB() => (super.noSuchMethod(
            Invocation.method(
              #getAllFavoriteProductsFromDB,
              [],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i6.Product>>(
              this,
              Invocation.method(
                #getAllFavoriteProductsFromDB,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>>
      getAllFiveStartRatingProducts() => (super.noSuchMethod(
            Invocation.method(
              #getAllFiveStartRatingProducts,
              [],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i6.Product>>(
              this,
              Invocation.method(
                #getAllFiveStartRatingProducts,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Product>> getProductById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Product>>.value(
            _FakeEither_0<_i5.Failure, _i6.Product>(
          this,
          Invocation.method(
            #getProductById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Product>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Product>> createProduct(
          _i6.Product? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProduct,
          [product],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Product>>.value(
            _FakeEither_0<_i5.Failure, _i6.Product>(
          this,
          Invocation.method(
            #createProduct,
            [product],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Product>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Product>> saveProductFavoriteIntoDB(
          _i6.Product? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveProductFavoriteIntoDB,
          [product],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Product>>.value(
            _FakeEither_0<_i5.Failure, _i6.Product>(
          this,
          Invocation.method(
            #saveProductFavoriteIntoDB,
            [product],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Product>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Product>> removeProductFavoriteIntoDB(
          _i6.Product? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeProductFavoriteIntoDB,
          [product],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Product>>.value(
            _FakeEither_0<_i5.Failure, _i6.Product>(
          this,
          Invocation.method(
            #removeProductFavoriteIntoDB,
            [product],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Product>>);
}
